///This datum handles the transitioning from a turf to a specific biome, and handles spawning decorative structures and mobs.
/datum/biome
	///Type of turf this biome creates
	var/turf_type
	/// Chance of having a structure from the flora types list spawn
	var/flora_density = 0
	/// Chance of spawning special features, such as geysers.
	var/feature_density = 0
	/// Chance of having a mob from the fauna types list spawn
	var/fauna_density = 0
	/// Weighted list of type paths of flora that can be spawned when the
	/// turf spawns flora.
	var/list/flora_types = list()
	/// Weighted list of extra features that can spawn in the biome, such as
	/// geysers. Gets expanded automatically.
	var/list/feature_types = list()
	/// Weighted list of type paths of fauna that can be spawned when the
	/// turf spawns fauna.
	var/list/fauna_types = list()

	var/open_turf_types = list(/turf/open/misc/asteroid = 1)
	var/list/feature_spawn_list
	var/list/mob_spawn_list
	var/list/flora_spawn_list
	var/mob_spawn_chance = 6
	var/flora_spawn_chance = 2
	var/feature_spawn_chance = 0.1


/datum/biome/New()
	. = ..()
	if(length(flora_types))
		flora_types = expand_weights(fill_with_ones(flora_types))

	if(length(fauna_types))
		fauna_types = expand_weights(fill_with_ones(fauna_types))

	if(length(feature_types))
		feature_types = expand_weights(feature_types)


///This proc handles the creation of a turf of a specific biome type
/datum/biome/proc/generate_turf(turf/gen_turf)
	gen_turf.ChangeTurf(turf_type, null, CHANGETURF_DEFER_CHANGE)
	if(length(flora_types) && prob(flora_density))
		var/obj/structure/flora = pick(flora_types)
		new flora(gen_turf)
		return

	if(length(feature_types) && prob(feature_density))
		var/atom/picked_feature = pick(feature_types)
		new picked_feature(gen_turf)
		return

	if(length(fauna_types) && prob(fauna_density))
		var/mob/fauna = pick(fauna_types)
		new fauna(gen_turf)


/// This proc handles the creation of a turf of a specific biome type, assuming
/// that the turf has not been initialized yet. Don't call this unless you know
/// what you're doing.
/datum/biome/proc/generate_turf_for_terrain(turf/gen_turf)
	var/turf/new_turf = new turf_type(gen_turf)
	return new_turf


/**
 * This proc handles the sequential creation of turfs of a specific biome type
 * in order to optimize the generation for large amount of turfs.
 *
 * Arguments:
 * * gen_turfs - List of turfs to use for turf generation.
 *
 * Returns a new list of turfs that were generated by the biome.
 */
/datum/biome/proc/generate_turfs_for_terrain(list/turf/gen_turfs)
	var/list/turf/new_turfs = list()

	for(var/turf/gen_turf as anything in gen_turfs)
		var/turf/new_turf = new turf_type(gen_turf)
		new_turfs += new_turf

		if(gen_turf.turf_flags & NO_RUINS)
			new_turf.turf_flags |= NO_RUINS

		CHECK_TICK

	return new_turfs


/// This proc handles populating the given turf based on whether flora,
/// features and fauna are allowed. Does not take megafauna into account.
/datum/biome/proc/populate_turf(turf/target_turf, flora_allowed, features_allowed, fauna_allowed)
	if(flora_allowed && length(flora_types) && prob(flora_density))
		var/obj/structure/flora = pick(flora_types)
		new flora(target_turf)
		return TRUE

	if(features_allowed && prob(feature_density))
		var/can_spawn = TRUE

		var/atom/picked_feature = pick(feature_types)

		for(var/obj/structure/existing_feature in range(7, target_turf))
			if(istype(existing_feature, picked_feature))
				can_spawn = FALSE
				break

		if(can_spawn)
			new picked_feature(target_turf)
			return TRUE

	if(fauna_allowed && length(fauna_types) && prob(fauna_density))
		var/mob/picked_mob = pick(fauna_types)

		// prevents tendrils spawning in each other's collapse range
		if(ispath(picked_mob, /obj/structure/spawner/lavaland))
			for(var/obj/structure/spawner/lavaland/spawn_blocker in range(2, target_turf))
				return FALSE

		// if the random is not a tendril (hopefully meaning it is a mob), avoid spawning if there's another one within 12 tiles
		else
			var/list/things_in_range = range(12, target_turf)
			for(var/mob/living/mob_blocker in things_in_range)
				if(ismining(mob_blocker))
					return FALSE

		new picked_mob(target_turf)
		return TRUE

	return FALSE


/**
 * This proc handles populating the given turfs based on whether flora, features
 * and fauna are allowed. Does not take megafauna into account.
 *
 * Does nothing if `flora_allowed`, `features_allowed` and `fauna_allowed` are
 * `FALSE`, or if there's no flora, feature or fauna types for the matching
 * allowed type. Aka, we return early if the proc wouldn't do anything anyway.
 */
/datum/biome/proc/populate_turfs(list/turf/target_turfs, flora_allowed, features_allowed, fauna_allowed)
	if(!(flora_allowed && length(flora_types)) && !(features_allowed && length(feature_types)) && !(fauna_allowed && length(fauna_types)))
		return


	for(var/turf/target_turf as anything in target_turfs)
		// We do the CHECK_TICK here because there's a bunch of continue calls
		// in this.
		CHECK_TICK

		if(flora_allowed && length(flora_types) && prob(flora_density))
			var/obj/structure/flora = pick(flora_types)
			new flora(target_turf)
			continue

		if(features_allowed && prob(feature_density))
			var/can_spawn = TRUE

			var/atom/picked_feature = pick(feature_types)

			for(var/obj/structure/existing_feature in range(7, target_turf))
				if(istype(existing_feature, picked_feature))
					can_spawn = FALSE
					break

			if(can_spawn)
				new picked_feature(target_turf)
				continue

		if(fauna_allowed && length(fauna_types) && prob(fauna_density))
			var/mob/picked_mob = pick(fauna_types)

			// prevents tendrils spawning in each other's collapse range
			if(ispath(picked_mob, /obj/structure/spawner/lavaland))
				for(var/obj/structure/spawner/lavaland/spawn_blocker in range(2, target_turf))
					continue

			// if the random is not a tendril (hopefully meaning it is a mob), avoid spawning if there's another one within 12 tiles
			else
				var/list/things_in_range = range(12, target_turf)
				for(var/mob/living/mob_blocker in things_in_range)
					if(ismining(mob_blocker))
						continue

			new picked_mob(target_turf)


/datum/biome/mudlands
	turf_type = /turf/open/misc/dirt/jungle/dark
	flora_types = list(
		/obj/structure/flora/grass/jungle/a/style_random = 1,
		/obj/structure/flora/grass/jungle/b/style_random = 1,
		/obj/structure/flora/rock/pile/jungle/style_random = 1,
		/obj/structure/flora/rock/pile/jungle/large/style_random = 1,
	)
	flora_density = 3

/datum/biome/plains
	turf_type = /turf/open/misc/grass/jungle
	flora_types = list(
		/obj/structure/flora/grass/jungle/a/style_random = 1,
		/obj/structure/flora/grass/jungle/b/style_random = 1,
		/obj/structure/flora/tree/jungle/style_random = 1,
		/obj/structure/flora/rock/pile/jungle/style_random = 1,
		/obj/structure/flora/bush/jungle/a/style_random = 1,
		/obj/structure/flora/bush/jungle/b/style_random = 1,
		/obj/structure/flora/bush/jungle/c/style_random = 1,
		/obj/structure/flora/bush/large/style_random = 1,
		/obj/structure/flora/rock/pile/jungle/large/style_random = 1,
	)
	flora_density = 15

/datum/biome/jungle
	turf_type = /turf/open/misc/grass/jungle
	flora_types = list(
		/obj/structure/flora/grass/jungle/a/style_random = 1,
		/obj/structure/flora/grass/jungle/b/style_random = 1,
		/obj/structure/flora/tree/jungle/style_random = 1,
		/obj/structure/flora/rock/pile/jungle/style_random = 1,
		/obj/structure/flora/bush/jungle/a/style_random = 1,
		/obj/structure/flora/bush/jungle/b/style_random = 1,
		/obj/structure/flora/bush/jungle/c/style_random = 1,
		/obj/structure/flora/bush/large/style_random = 1,
		/obj/structure/flora/rock/pile/jungle/large/style_random = 1,
	)
	flora_density = 40

/datum/biome/jungle/deep
	flora_density = 65

/datum/biome/wasteland
	turf_type = /turf/open/misc/dirt/jungle/wasteland

/datum/biome/water
	turf_type = /turf/open/water/jungle

/datum/biome/mountain
	turf_type = /turf/closed/mineral/random/jungle



/proc/pickweight(list/L)
	var/total = 0
	var/item
	for (item in L)
		if (!L[item])
			L[item] = 1
		total += L[item]

	total = rand(1, total)
	for (item in L)
		total -=L [item]
		if (total <= 0)
			return item

	return null

/datum/biome/cave
	var/closed_turf_types =  list(/turf/closed/mineral/random/volcanic = 1)
	open_turf_types = list(/turf/open/misc/asteroid = 1)

/datum/biome/proc/generate_overworld(var/turf/gen_turf)
	//TURF SPAWNING
	var/turf/picked_turf = pickweight(open_turf_types)
	var/turf/open/new_turf = gen_turf.ChangeTurf(picked_turf, initial(picked_turf.baseturfs), CHANGETURF_IGNORE_AIR|CHANGETURF_RECALC_ADJACENT|CHANGETURF_DEFER_CHANGE)
	CHECK_TICK
	gen_turf.AfterChange(CHANGETURF_IGNORE_AIR|CHANGETURF_RECALC_ADJACENT)
	CHECK_TICK

	generate_features(new_turf)

	CHECK_TICK

/datum/biome/cave/proc/generate_caves(turf/gen_turf, string_gen)
	var/area/A = gen_turf.loc
	if(!(A.area_flags & CAVES_ALLOWED))
		return

	var/closed = text2num(string_gen[world.maxx * (gen_turf.y - 1) + gen_turf.x])

	var/stored_flags
	if(gen_turf.flags_1 & NO_RUINS)
		stored_flags |= NO_RUINS

	var/turf/new_turf = pickweight(closed ? closed_turf_types : open_turf_types)
	new_turf = gen_turf.ChangeTurf(new_turf, initial(new_turf.baseturfs), CHANGETURF_IGNORE_AIR|CHANGETURF_DEFER_CHANGE)
	new_turf.flags_1 |= stored_flags
	CHECK_TICK
	gen_turf.AfterChange(CHANGETURF_IGNORE_AIR|CHANGETURF_RECALC_ADJACENT)

	CHECK_TICK

	//Overwrite turf areas with cave areas to combat weather
	var/area/overmap_encounter/planetoid/cave/new_area = GLOB.areas_by_type[/area/overmap_encounter/planetoid/cave] || new
	var/area/old_area = get_area(new_turf)
	new_area.contents += new_turf
	new_turf.change_area(old_area, new_area)
	CHECK_TICK

	if(!closed)
		generate_features(new_turf)
	CHECK_TICK

/datum/biome/proc/generate_features(turf/new_turf)
	//FLORA SPAWNING
	var/atom/spawned_flora
	var/area/A = new_turf.loc
	if(flora_spawn_list && prob(flora_spawn_chance))
		var/can_spawn = TRUE
		if(!(A.area_flags & FLORA_ALLOWED))
			can_spawn = FALSE
		if(can_spawn)
			spawned_flora = pickweight(flora_spawn_list)
			spawned_flora = new spawned_flora(new_turf)
			new_turf.flags_1 |= NO_LAVA_GEN

	//FEATURE SPAWNING HERE
	var/atom/spawned_feature
	if(feature_spawn_list && prob(feature_spawn_chance) && !spawned_flora)
		var/can_spawn = TRUE

		if(!(A.area_flags & FLORA_ALLOWED))
			can_spawn = FALSE

		var/atom/picked_feature = pickweight(feature_spawn_list)

		for(var/obj/F in range(7, new_turf))
			if(istype(F, picked_feature))
				can_spawn = FALSE

		if(can_spawn)
			spawned_feature = new picked_feature(new_turf)
			new_turf.flags_1 |= NO_LAVA_GEN

	//MOB SPAWNING
	if(mob_spawn_list && !spawned_flora && !spawned_feature && prob(mob_spawn_chance))
		var/can_spawn = TRUE

		if(!(A.area_flags & MOB_SPAWN_ALLOWED))
			can_spawn = FALSE

		var/atom/picked_mob = pickweight(mob_spawn_list)

		for(var/thing in urange(12, new_turf)) //prevents mob clumps
			if(!ishostile(thing) && !istype(thing, /obj/structure/spawner))
				continue
			if(ispath(picked_mob, /mob/living) || istype(thing, /mob/living/))
				can_spawn = FALSE //if the random is a standard mob, avoid spawning if there's another one within 12 tiles
				break
			if((ispath(picked_mob, /obj/structure/spawner) || istype(thing, /obj/structure/spawner)) && get_dist(new_turf, thing) <= 2)
				can_spawn = FALSE //prevents tendrils spawning in each other's collapse range
				break

		if(can_spawn)
			new picked_mob(new_turf)
			new_turf.flags_1 |= NO_LAVA_GEN


	CHECK_TICK
